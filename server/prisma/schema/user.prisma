model UsersBasicInfo {
  userId Int @unique @map("user_id")
  firstName String @db.VarChar(60) @map("first_name")
  middleName String @db.VarChar(60) @map("middle_name")
  lastName String @db.VarChar(60) @map("last_name")
  birthdate DateTime
  email String @db.VarChar(60) @unique
  mobileNumber String @db.VarChar(11) @map("mobile_number") @unique
  maritalStatus String @db.VarChar(10) @map("marital_status")
  gender String @db.VarChar(6)

  nationality String @db.VarChar(60)

  provinceCode String @db.VarChar(5) @map("province_code")
  cityCode String @db.VarChar(7) @map("city_code")
  brangayCode String @db.VarChar(10) @map("brangay_code")
  zipCode String @db.VarChar(4) @map("zip_code")
  address String @db.VarChar(120)

  employee Employee @relation(fields: [userId], references: [userId])

  @@map("user_basic_info")
}

model UserEmploymentBackground {
  userId Int @unique @map("user_id")
  company String @db.VarChar(120)
  position String @db.VarChar(120)
  dateStart DateTime @map("date_start")
  dateEnd DateTime @map("date_end")

  employee Employee @relation(fields: [userId], references: [userId])

  @@map("user_employment_background")
}

model UserEducationalBackground {
  userId Int @unique @map("user_id")
  school String @db.Text
  level  String @db.VarChar(120)
  dateStart DateTime @map("date_start")
  dateEnd DateTime @map("date_end")

  employee Employee @relation(fields: [userId], references: [userId])

  @@map("user_educational_background")
}

model UserEmployementInfo {
  userId Int @unique @map("user_id")
  employeeId Int @unique @map("employee_id")
  salary Decimal
  dateRegularization DateTime @map("date_regularization")
  dateStart DateTime @map("date_start")
  dateEnd DateTime @map("date_end")

  @@map("user_employment_info")
}

model Employee {
  userId Int @map("user_id") @unique
  positionId Int @map("position_id")
  employmentTypeId Int @map("employee_type_id")

  position Position @relation(fields: [positionId], references: [id])
  basicInfo UsersBasicInfo?
  employmentBackground UserEmploymentBackground[]
  educationalBackground UserEducationalBackground[]
  benefit UserBenefit[]

  employmentType EmployeeType @relation(fields: [employmentTypeId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("employee")
}

model User {
  id Int @id @default(autoincrement())
  roleId Int @map("role_id")

  email String @unique @db.VarChar(255)
  isActive Boolean @default(true) @map("is_active")
  password String @db.VarChar(60)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  role Role @relation(fields: [roleId], references: [id])
  employee Employee?  

  @@map("user")
}

model UserBenefit {
  userId Int @map("user_id")
  benefitId Int @map("benefit_id")
  amount Decimal

  employee Employee @relation(fields: [userId], references: [userId])
  benefit Benefit @relation(fields: [benefitId], references: [id])

  @@id([userId, benefitId])
  @@map("user_benefit")
}